import os
import requests
from bs4 import BeautifulSoup
import hashlib
import json
from enum import Enum

class EstateParam(Enum):
    ROOMS = ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", "üö™ –ö–æ–º–Ω–∞—Ç: {}")
    TOTAL_AREA = ("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å", "üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {}")
    FLOOR = ("–≠—Ç–∞–∂", "ü™ú  –≠—Ç–∞–∂: {}")
    PLOT_AREA = ("–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞", "üå≥ –ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞: {}")
    HOUSE_TYPE = ("–¢–∏–ø –¥–æ–º–∞", "üè° –¢–∏–ø –¥–æ–º–∞: {}")
    WALL_MATERIAL = ("–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω", "üß± –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω: {}")
    BUILD_YEAR = ("–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", "üìÖ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {}")
    DISTANCE_TO_CENTER = ("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞", "üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {}")
    LAND_CATEGORY = ("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å", "üèûÔ∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å: {}")
    GARAGE_TYPE = ("–¢–∏–ø –≥–∞—Ä–∞–∂–∞", "üöó –¢–∏–ø –≥–∞—Ä–∞–∂–∞: {}")
    PARKING_TYPE = ("–¢–∏–ø –º–∞—à–∏–Ω–æ–º–µ—Å—Ç–∞", "üÖøÔ∏è –¢–∏–ø –º–∞—à–∏–Ω–æ–º–µ—Å—Ç–∞: {}")
    ROOM_AREA = ("–ü–ª–æ—â–∞–¥—å –∫–æ–º–Ω–∞—Ç—ã", "üõèÔ∏è  –ü–ª–æ—â–∞–¥—å –∫–æ–º–Ω–∞—Ç—ã: {}")
    ROOMS_IN_APARTMENT = ("–ö–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ", "üè† –ö–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {}")
    HOUSE_AREA = ("–ü–ª–æ—â–∞–¥—å –¥–æ–º–∞", "üè† –ü–ª–æ—â–∞–¥—å –¥–æ–º–∞: {}")
    FLOORS_IN_HOUSE = ("–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ", "üè† –≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ: {}")
    AREA = ("–ü–ª–æ—â–∞–¥—å:", "üìê –ü–ª–æ—â–∞–¥—å: {}")

    def __init__(self, param_name, display_format):
        self.param_name = param_name
        self.display_format = display_format

class AvitoParser:
    def __init__(self, cache_dir="cache"):
        self.price_value = None
        self.full_address = None
        self.type_estate = None
        self.cache_dir = cache_dir
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(self.cache_dir, exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ None
        for param in EstateParam:
            setattr(self, param.name.lower(), None)

    def _get_cache_filename(self, url):
        # –•—ç—à–∏—Ä—É–µ–º URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        url_hash = hashlib.md5(url.encode()).hexdigest()
        return os.path.join(self.cache_dir, f"{url_hash}.json")

    def _download_html(self, url):
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
        return response.text

    def _process_address(self, address):
        parts = address.split(',')
        if '—É–ª.' in parts[-2]:
            processed_parts = [part + '\n üìç' for part in parts[:-2]]
            processed_parts.append(f"{parts[-2]},{parts[-1]}")
        else:
            processed_parts = [part + '\n üìç' for part in parts[:-1]]
            processed_parts.append(parts[-1])
        address = ''.join(processed_parts)
        return address

    def _extract_type_estate(self, title):
        estate_types_mapping = {
            '–∫–≤–∞—Ä—Ç–∏—Ä–∞': '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
            '–ö–≤–∞—Ä—Ç–∏—Ä–∞-—Å—Ç—É–¥–∏—è': '–°—Ç—É–¥–∏—è',
            '–°–≤–æ–±. –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞': '–°–≤–æ–±–æ–¥–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞',
            '–ö–æ–º–Ω–∞—Ç–∞': '–ö–æ–º–Ω–∞—Ç–∞',
            '–î–æ–º': '–î–æ–º',
            '–î–∞—á–∞': '–î–∞—á–∞',
            '–ö–æ—Ç—Ç–µ–¥–∂': '–ö–æ—Ç—Ç–µ–¥–∂',
            '–¢–∞—É–Ω—Ö–∞—É—Å': '–¢–∞—É–Ω—Ö–∞—É—Å',
            '–ò–ñ–°': '–ò–ñ–°',
            '–°–ù–¢, –î–ù–ü': '–°–ù–¢',
            '–ì–∞—Ä–∞–∂,': '–ì–∞—Ä–∞–∂',
            '–ú–∞—à–∏–Ω–æ–º–µ—Å—Ç–æ': '–ú–∞—à–∏–Ω–æ–º–µ—Å—Ç–æ'
        }
        
        for search_string, estate_type in estate_types_mapping.items():
            if search_string in title:
                return estate_type
        
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    def _extract_param(self, params_soup, param_name):
        for li in params_soup.find_all('li', class_='params-paramsList__item-_2Y2O'):
            span = li.find('span', class_='styles-module-noAccent-l9CMS')
            if span and param_name in span.text:
                return span.next_sibling.strip()
        return None

    def _format_price(self, price):
        try:
            price_num = int(price.replace(" ", "").replace("‚ÇΩ", ""))
            return f"{price_num:,}".replace(",", " ")
        except (ValueError, AttributeError):
            return price

    def parse(self, url):
        cache_file = self._get_cache_filename(url)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å –∫—ç—à–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á–∏—Ç–∞–µ–º –∏–∑ –Ω–µ–≥–æ
        if os.path.exists(cache_file):
            with open(cache_file, "r", encoding="utf-8") as file:
                return json.load(file)

        # –°–∫–∞—á–∏–≤–∞–µ–º HTML
        html = self._download_html(url)

        # –ü–∞—Ä—Å–∏–º HTML
        soup = BeautifulSoup(html, 'html.parser')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        title = soup.find('title').text if soup.find('title') else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        self.type_estate = self._extract_type_estate(title)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
        price_span = soup.find('span', {'itemprop': 'price'})
        self.price_value = price_span.get('content', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') if price_span else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        self.price_value = self._format_price(self.price_value)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –±–ª–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if params_block := soup.find('div', {'data-marker': 'item-view/item-params'}):
            params_soup = BeautifulSoup(params_block.decode_contents(), 'html.parser')

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            for param in EstateParam:
                value = self._extract_param(params_soup, param.param_name)
                setattr(self, param.name.lower(), value)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å
        address_element = soup.find('span', class_='style-item-address__string-wt61A')
        self.full_address = address_element.text.strip() if address_element else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        self.full_address = self._process_address(self.full_address)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        result = []
        result.append(f"üåü <b>{self.type_estate}</b>")
        result.append(f"üíµ {self.price_value}‚ÇΩ\n")
        result.append(f"‚õ≥Ô∏è {self.full_address}\n")

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ None
        for param in EstateParam:
            value = getattr(self, param.name.lower())
            if value is not None:
                result.append(param.display_format.format(value))

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
        result.append('\n\n')
        result_str = "\n".join(result)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
        with open(cache_file, "w", encoding="utf-8") as file:
            json.dump(result_str, file, ensure_ascii=False)

        return result_str


if __name__ == "__main__":
    url0 = 'https://www.avito.ru/ekaterinburg/kvartiry/1-k._kvartira_406_m_69_et._4574477371?context=H4sIAAAAAAAA_wEmANn_YToxOntzOjE6IngiO3M6MTY6Ik9Ra1c5RzE3TUY5c0R2NW8iO32sRl6AJgAAAA'
    url1 = 'https://www.avito.ru/ekaterinburg/kvartiry/kvartira-studiya_57_m_1625_et._7243069890?context=H4sIAAAAAAAA_wEmANn_YToxOntzOjE6IngiO3M6MTY6InlOcXhNSHk4bHg4MkxjWlQiO33jAkacJgAAAA'
    url2 = 'https://www.avito.ru/ekaterinburg/kvartiry/svob._planirovka_50_m_44_et._5122336744?context=H4sIAAAAAAAA_wEmANn_YToxOntzOjE6IngiO3M6MTY6IlpGY3FYb0UxMkk3VUxjMFAiO31DR3s7JgAAAA'
    url3 = 'https://www.avito.ru/verhnyaya_salda/komnaty/komnata_135_m_v_1-k._45_et._1333252089?context=H4sIAAAAAAAA_wEmANn_YToxOntzOjE6IngiO3M6MTY6Imt5dWRNS29pa25CeWg0VXYiO30K98gkJgAAAA'
    url4 = 'https://www.avito.ru/verhnee_dubrovo/doma_dachi_kottedzhi/dom_1274_m_na_uchastke_76_sot._7252674869?context=H4sIAAAAAAAA_wEmANn_YToxOntzOjE6IngiO3M6MTY6Ik5od2N2Z1BHaVJhaVpVOHAiO31XgMClJgAAAA'
    url5 = 'https://www.avito.ru/dvurechensk/doma_dachi_kottedzhi/dacha_18_m_na_uchastke_10_sot._3203306502?context=H4sIAAAAAAAA_wEmANn_YToxOntzOjE6IngiO3M6MTY6IjJzRTNyWEZDQVBvYkRKdUgiO30NWGFWJgAAAA'
    url6 = 'https://www.avito.ru/ekaterinburg/doma_dachi_kottedzhi/kottedzh_200_m_na_uchastke_8_sot._3080749310?context=H4sIAAAAAAAA_wEmANn_YToxOntzOjE6IngiO3M6MTY6IlVsSnpzSWphTVd5c29tdXgiO33Z6DWlJgAAAA'
    url7 = 'https://www.avito.ru/verhnee_dubrovo/doma_dachi_kottedzhi/taunhaus_134_m_na_uchastke_2_sot._7221450986?context=H4sIAAAAAAAA_wEmANn_YToxOntzOjE6IngiO3M6MTY6IlhnajNUQ0lVZU8yeFBTRkwiO33NMB-aJgAAAA'
    url8 = 'https://www.avito.ru/verhnyaya_pyshma/zemelnye_uchastki/uchastok_6_sot._izhs_1387175700?context=H4sIAAAAAAAA_wEmANn_YToxOntzOjE6IngiO3M6MTY6ImcxMEFvZ3hrU1FWUDIxenMiO320OK3wJgAAAA'
    url9 = 'https://www.avito.ru/ekaterinburg/zemelnye_uchastki/uchastok_5_ga_snt_dnp_4611091619?context=H4sIAAAAAAAA_wEmANn_YToxOntzOjE6IngiO3M6MTY6InRxbFgwQ0R4cEl0Q0NuSmsiO303-IQAJgAAAA'
    url10 = 'https://www.avito.ru/pervouralsk/garazhi_i_mashinomesta/garazh_22_m_4837910861?context=H4sIAAAAAAAA_wEmANn_YToxOntzOjE6IngiO3M6MTY6IlZtNVUyYjdXT3hyQVdxbUciO30bKPsiJgAAAA'
    url11 = 'https://www.avito.ru/ekaterinburg/garazhi_i_mashinomesta/mashinomesto_15_m_4547294076?context=H4sIAAAAAAAA_wEmANn_YToxOntzOjE6IngiO3M6MTY6IjhrOVdjRmdwVmRoMkFtQloiO30uAaclJgAAAA'
    parser = AvitoParser()
    print(parser.parse(url0))